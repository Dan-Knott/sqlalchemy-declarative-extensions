import pytest
from pytest_alembic import MigrationContext
from pytest_mock_resources import MysqlConfig, create_mysql_fixture
from sqlalchemy import text

# Use the mysql fixture provided by pytest-mock-resources
alembic_engine = create_mysql_fixture(scope="function", engine_kwargs={"echo": True})

@pytest.fixture(scope="session")
def pmr_mysql_config():
    '''Override the default config.'''
    return MysqlConfig(image="mysql:8", port=None, ci_port=None)

def test_apply_autogenerated_revision(alembic_runner: MigrationContext, alembic_engine):
    '''Check that autogenerate detects the new function and the migration runs.'''
    # Required for MySQL function creation without SUPER privilege
    with alembic_engine.connect() as conn:
        conn.execute(text("SET GLOBAL log_bin_trust_function_creators = ON;"))
        conn.commit() # Commit the global setting change if needed

    # Generate the revision based on the models
    alembic_runner.generate_revision(autogenerate=True, prevent_file_generation=False, message="Add add_deterministic function")

    # Apply the generated migration
    alembic_runner.migrate_up_one()

    # Verify the function exists and works
    with alembic_engine.connect() as conn:
        result = conn.execute(text("select add_deterministic(5)")).scalar()
        assert result == 6